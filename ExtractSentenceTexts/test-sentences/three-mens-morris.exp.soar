#### Test sentences for ROSIE - 
#    Built by the SentencesToSoar tool Mon Aug 24 10:46:49 EDT 2015
#    from file 'three-mens-morris.exp.txt'.
learn --off
#   Apply initialize-rosie to set up the state.
sp {apply*initialize-rosie*sentence-number
   (state <s> ^name rosie
              ^operator.name initialize-rosie)
-->
   (<s> ^current-sentence-number 1
        ^max-sentence-number 11
        ^failure-count 0
        ^success-count 0)
}


#   The name of the game is three-mens-morris.
sp {elaborate*state*sentence*the-name-of-the-game-is-three-mens-morris
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 1)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S122>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The name of the game is three-mens-morris.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |name|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |the|
         ^next <w4>)
   (<w4> ^spelling |game|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |three-mens-morris|
         ^next <w7>)
   (<w7> ^spelling |.|
         ^next nil)
   (<S122> ^arg1 <S240>
           ^message-type object-description
           ^predicate <R10166>)
   (<S240> ^2 <S241>
           ^handle of1
           ^item-type predicate)
   (<S241> ^2 <G3>
           ^handle name1)
   (<G3> ^handle game1
          ^property <C25>)
   (<C25> ^handle concept
           ^type conceptual)
   (<R10166> #^handle three-mens-morris1
              ^item-type predicate
              ^word-structure <N10053>)
   (<N10053> ^referent <R10166>
              ^spelling three-mens-morris)
}


#   The name of an action is place.
sp {elaborate*state*sentence*the-name-of-an-action-is-place-block
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 2)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S298>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The name of an action is place-block.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |name|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |an|
         ^next <w4>)
   (<w4> ^spelling |action|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |place-block|
         ^next <w7>)
   (<w7> ^spelling |.|
         ^next nil)
   (<S298> ^arg1 <S416>
           ^message-type object-description
           ^predicate <R10287>)
   (<S416> ^2 <S417>
           ^handle of1
           ^item-type predicate)
   (<S417> ^2 <A10025>
           ^handle name1)
   (<A10025> ^handle action
              ^property <C25>)
   (<C25> ^handle concept
           ^type conceptual)
   (<R10287> ^item-type predicate 
             ^word-structure <N10066>)
   (<N10066> ^spelling place-block)
}


#   The name of an action is slide.
sp {elaborate*state*sentence*the-name-of-an-action-is-slide
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 3)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S474>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The name of an action is slide.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |name|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |an|
         ^next <w4>)
   (<w4> ^spelling |action|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |slide|
         ^next <w7>)
   (<w7> ^spelling |.|
         ^next nil)
   (<S474> ^arg1 <S592>
           ^message-type object-description
           ^predicate <R10408>)
   (<S592> ^2 <S593>
           ^handle of1
           ^item-type predicate)
   (<S593> ^2 <A10025>
           ^handle name1)
   (<A10025> ^handle action
              ^property <C25>)
   (<C25> ^handle concept
           ^type conceptual)
   (<R10408> #^handle slide3
              ^item-type predicate
              ^word-structure <N10131>)
   (<N10131> ^referent <R10408>
              ^spelling slide)
}


#   Move a free red block onto a clear location.
sp {elaborate*state*sentence*move-a-free-red-block-onto-a-clear-location
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 4)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S650>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |Move a free red block onto a clear location.|)
   (<w0> ^spelling |move|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |free|
         ^next <w3>)
   (<w3> ^spelling |red|
         ^next <w4>)
   (<w4> ^spelling |block|
         ^next <w5>)
   (<w5> ^spelling |onto|
         ^next <w6>)
   (<w6> ^spelling |a|
         ^next <w7>)
   (<w7> ^spelling |clear|
         ^next <w8>)
   (<w8> ^spelling |location|
         ^next <w9>)
   (<w9> ^spelling |.|
         ^next nil)
   (<S650> ^action <A1008>
           ^arg1 <P90146>
           ^arg2 <S827>
           ^message-type command)
   (<A1008> ^handle move1
             ^item-type action)
   (<P90146> #^handle new-object-id4
             ^item-type block
             ^predicates <P90147>
             ^predicates-copied true)
   (<P90147> ^color red1
             ^dialog-object true
             ^property free)
   (<S827> ^2 <P90156>
           ^handle on1
           ^item-type predicate)
   (<P90156> #^handle new-object-id5
             ^item-type object
             ^predicates <P90157>
             ^predicates-copied true)
   (<P90157> ^category location
             ^dialog-object true
             ^handle clear
             ^property clear)
}


#   If a location is clear then you can move a free red block onto the location.
sp {elaborate*state*sentence*if-a-location-is-clear-then-you-can-move-a-free-red-block-onto-the-location
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 5)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S854>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a location is clear then you can move a free red block onto the location.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |location|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |clear|
         ^next <w5>)
   (<w5> ^spelling |then|
         ^next <w6>)
   (<w6> ^spelling |you|
         ^next <w7>)
   (<w7> ^spelling |can|
         ^next <w8>)
   (<w8> ^spelling |move|
         ^next <w9>)
   (<w9> ^spelling |a|
         ^next <w10>)
   (<w10> ^spelling |free|
         ^next <w11>)
   (<w11> ^spelling |red|
         ^next <w12>)
   (<w12> ^spelling |block|
         ^next <w13>)
   (<w13> ^spelling |onto|
         ^next <w14>)
   (<w14> ^spelling |the|
         ^next <w15>)
   (<w15> ^spelling |location|
         ^next <w16>)
   (<w16> ^spelling |.|
         ^next nil)
   (<S854> ^if-subclause <S972>
           ^message-type conditional
           ^then-subclause <S1292>)
   (<S972> ^arg1 <P90166>
           ^predicate <C11>)
   (<P90166> #^handle new-object-id6
             ^item-type object
             ^predicates <P90167>
             ^predicates-copied true)
   (<P90167> ^category location
             ^dialog-object true
             ^handle location)
   (<C11> ^handle clear
           ^item-type predicate
           ^property <C12>)
   (<C12> ^handle property
           ^type visual)
   (<S1292> ^action <A1008>
            ^action-modifier <C44>
            ^agent <R10037>
            ^arg1 <P90194>
            ^arg2 <S1275>)
   (<A1008> ^handle move1
             ^item-type action)
   (<C44> ^handle can)
   (<R10037> ^arm <A10071>
             ^handle rosie
             ^item-type object
             ^predicates <P90062>)
   (<A10071> ^action wait)
   (<P90062> ^handle rosie)
   (<P90194> #^handle new-object-id7
             ^item-type block
             ^predicates <P90195>
             ^predicates-copied true)
   (<P90195> ^color red1
             ^dialog-object true
             ^handle block
             ^property free)
   (<S1275> ^2 <P90166>
            ^handle on1
            ^item-type predicate)
}


#   If the red blocks are on their locations then you can move a red block onto a clear location.
sp {elaborate*state*sentence*if-the-red-blocks-are-on-their-locations-then-you-can-move-a-red-block-onto-a-clear-location
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 6)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S1319>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If the red blocks are on their locations then you can move a red block onto a clear location.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |the|
         ^next <w2>)
   (<w2> ^spelling |red|
         ^next <w3>)
   (<w3> ^spelling |blocks|
         ^next <w4>)
   (<w4> ^spelling |are|
         ^next <w5>)
   (<w5> ^spelling |on|
         ^next <w6>)
   (<w6> ^spelling |their|
         ^next <w7>)
   (<w7> ^spelling |locations|
         ^next <w8>)
   (<w8> ^spelling |then|
         ^next <w9>)
   (<w9> ^spelling |you|
         ^next <w10>)
   (<w10> ^spelling |can|
         ^next <w11>)
   (<w11> ^spelling |move|
         ^next <w12>)
   (<w12> ^spelling |a|
         ^next <w13>)
   (<w13> ^spelling |red|
         ^next <w14>)
   (<w14> ^spelling |block|
         ^next <w15>)
   (<w15> ^spelling |onto|
         ^next <w16>)
   (<w16> ^spelling |a|
         ^next <w17>)
   (<w17> ^spelling |clear|
         ^next <w18>)
   (<w18> ^spelling |location|
         ^next <w19>)
   (<w19> ^spelling |.|
         ^next nil)
   (<S1319> ^if-subclause <S1474>
            ^message-type conditional
            ^then-subclause <S1830>)
   (<S1474> ^arg1 <P90258>
            ^predicate <S1548>)
   (<P90258> #^handle new-object-id8
             ^item-type block
             ^predicates <P90259>
             ^predicates-copied true)
   (<P90259> ^category object
             ^color red1
             ^dialog-object true
             ^multiple true
             ^visibility not-visible)
   (<S1548> ^2 <P90275>
            ^handle on1
            ^item-type predicate)
   (<P90275> #^handle new-object-id9
             ^item-type object
             ^predicates <P90276>
             ^predicates-copied true)
   (<P90276> ^category location
             ^dialog-object true
             ^handle location
             ^multiple true
             ^visibility not-visible)
   (<S1830> ^action <A1008>
            ^action-modifier <C44>
            ^agent <R10037>
            ^arg1 <P90295>
            ^arg2 <S1813>)
   (<A1008> ^handle move1
             ^item-type action)
   (<C44> ^handle can)
   (<R10037> ^arm <A10071>
             ^handle rosie
             ^item-type object
             ^predicates <P90062>)
   (<A10071> ^action wait)
   (<P90062> ^handle rosie)
   (<P90295> #^handle new-object-id10
             ^item-type block
             ^predicates <P90296>
             ^predicates-copied true)
   (<P90296> ^color red1
             ^dialog-object true
             ^handle block)
   (<S1813> ^2 <P90305>
            ^handle on1
            ^item-type predicate)
   (<P90305> #^handle new-object-id11
             ^item-type object
             ^predicates <P90306>
             ^predicates-copied true)
   (<P90306> ^category location
             ^dialog-object true
             ^handle location
             ^property clear)
}


#   If all the red blocks are on their locations then you can move a red block onto a clear location.
sp {elaborate*state*sentence*if-all-the-red-blocks-are-on-their-locations-then-you-can-move-a-red-block-onto-a-clear-location
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 7)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S1857>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If all the red blocks are on their locations then you can move a red block onto a clear location.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |all|
         ^next <w2>)
   (<w2> ^spelling |the|
         ^next <w3>)
   (<w3> ^spelling |red|
         ^next <w4>)
   (<w4> ^spelling |blocks|
         ^next <w5>)
   (<w5> ^spelling |are|
         ^next <w6>)
   (<w6> ^spelling |on|
         ^next <w7>)
   (<w7> ^spelling |their|
         ^next <w8>)
   (<w8> ^spelling |locations|
         ^next <w9>)
   (<w9> ^spelling |then|
         ^next <w10>)
   (<w10> ^spelling |you|
         ^next <w11>)
   (<w11> ^spelling |can|
         ^next <w12>)
   (<w12> ^spelling |move|
         ^next <w13>)
   (<w13> ^spelling |a|
         ^next <w14>)
   (<w14> ^spelling |red|
         ^next <w15>)
   (<w15> ^spelling |block|
         ^next <w16>)
   (<w16> ^spelling |onto|
         ^next <w17>)
   (<w17> ^spelling |a|
         ^next <w18>)
   (<w18> ^spelling |clear|
         ^next <w19>)
   (<w19> ^spelling |location|
         ^next <w20>)
   (<w20> ^spelling |.|
         ^next nil)
   (<S1857> ^if-subclause <S2025>
            ^message-type conditional
            ^then-subclause <S2381>)
   (<S2025> ^arg1 <P90345>
            ^predicate <S2099>)
   (<P90345> #^handle new-object-id12
             ^item-type block
             ^predicates <P90346>
             ^predicates-copied true)
   (<P90346> ^category object
             ^color red1
             ^dialog-object true
             ^handle red1
             ^handle block
             ^multiple true
             ^visibility not-visible)
   (<S2099> ^2 <P90362>
            ^handle on1
            ^item-type predicate)
   (<P90362> #^handle new-object-id13
             ^item-type object
             ^predicates <P90363>
             ^predicates-copied true)
   (<P90363> ^category location
             ^dialog-object true
             ^handle location
             ^multiple true
             ^visibility not-visible)
   (<S2381> ^action <A1008>
            ^action-modifier <C44>
            ^agent <R10037>
            ^arg1 <P90382>
            ^arg2 <S2364>)
   (<A1008> ^handle move1
             ^item-type action)
   (<C44> ^handle can)
   (<R10037> ^arm <A10071>
             ^handle rosie
             ^item-type object
             ^predicates <P90062>)
   (<A10071> ^action wait)
   (<P90062> ^handle rosie)
   (<P90382> #^handle new-object-id14
             ^item-type block
             ^predicates <P90383>
             ^predicates-copied true)
   (<P90383> ^color red1
             ^dialog-object true
             ^handle block)
   (<S2364> ^2 <P90392>
            ^handle on1
            ^item-type predicate)
   (<P90392> #^handle new-object-id15
             ^item-type object
             ^predicates <P90393>
             ^predicates-copied true)
   (<P90393> ^category location
             ^dialog-object true
             ^handle location
             ^property clear)
}


#   If all of the red blocks are on their locations then you can move a red block onto a clear location.
sp {elaborate*state*sentence*if-all-of-the-red-blocks-are-on-their-locations-then-you-can-move-a-red-block-onto-a-clear-location
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 8)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2404>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If all of the red blocks are on their locations then you can move a red block onto a clear location.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |all|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |the|
         ^next <w4>)
   (<w4> ^spelling |red|
         ^next <w5>)
   (<w5> ^spelling |blocks|
         ^next <w6>)
   (<w6> ^spelling |are|
         ^next <w7>)
   (<w7> ^spelling |on|
         ^next <w8>)
   (<w8> ^spelling |their|
         ^next <w9>)
   (<w9> ^spelling |locations|
         ^next <w10>)
   (<w10> ^spelling |then|
         ^next <w11>)
   (<w11> ^spelling |you|
         ^next <w12>)
   (<w12> ^spelling |can|
         ^next <w13>)
   (<w13> ^spelling |move|
         ^next <w14>)
   (<w14> ^spelling |a|
         ^next <w15>)
   (<w15> ^spelling |red|
         ^next <w16>)
   (<w16> ^spelling |block|
         ^next <w17>)
   (<w17> ^spelling |onto|
         ^next <w18>)
   (<w18> ^spelling |a|
         ^next <w19>)
   (<w19> ^spelling |clear|
         ^next <w20>)
   (<w20> ^spelling |location|
         ^next <w21>)
   (<w21> ^spelling |.|
         ^next nil)
   (<S2404> ^if-subclause <S2601>
            ^message-type conditional
            ^then-subclause <S2957>)
   (<S2601> ^arg1 <P90437>
            ^predicate <S2675>)
   (<P90437> #^handle new-object-id16
             ^item-type block
             ^predicates <P90438>
             ^predicates-copied true)
   (<P90438> ^category object
             ^color red1
             ^dialog-object true
             ^handle block
             ^multiple true
             ^visibility not-visible)
   (<S2675> ^2 <P90454>
            ^handle on1
            ^item-type predicate)
   (<P90454> #^handle new-object-id17
             ^item-type object
             ^predicates <P90455>
             ^predicates-copied true)
   (<P90455> ^category location
             ^dialog-object true
             ^handle location
             ^multiple true
             ^visibility not-visible)
   (<S2957> ^action <A1008>
            ^action-modifier <C44>
            ^agent <R10037>
            ^arg1 <P90474>
            ^arg2 <S2940>)
   (<A1008> ^handle move1
             ^item-type action)
   (<C44> ^handle can)
   (<R10037> ^arm <A10071>
             ^handle rosie
             ^item-type object
             ^predicates <P90062>)
   (<A10071> ^action wait)
   (<P90062> ^handle rosie)
   (<P90474> #^handle new-object-id18
             ^item-type block
             ^predicates <P90475>
             ^predicates-copied true)
   (<P90475> ^color red1
             ^dialog-object true
             ^handle block)
   (<S2940> ^2 <P90484>
            ^handle on1
            ^item-type predicate)
   (<P90484> #^handle new-object-id19
             ^item-type object
             ^predicates <P90485>
             ^predicates-copied true)
   (<P90485> ^category location
             ^dialog-object true
             ^handle location
             ^property clear)
}


#   If all your pieces are on their locations then you can move one of your pieces onto a clear location.
sp {elaborate*state*sentence*if-all-your-pieces-are-on-their-locations-then-you-can-move-one-of-your-pieces-onto-a-clear-location
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 9)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2984>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If all your pieces are on their locations then you can move one of your pieces onto a clear location.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |all|
         ^next <w2>)
   (<w2> ^spelling |your|
         ^next <w3>)
   (<w3> ^spelling |pieces|
         ^next <w4>)
   (<w4> ^spelling |are|
         ^next <w5>)
   (<w5> ^spelling |on|
         ^next <w6>)
   (<w6> ^spelling |their|
         ^next <w7>)
   (<w7> ^spelling |locations|
         ^next <w8>)
   (<w8> ^spelling |then|
         ^next <w9>)
   (<w9> ^spelling |you|
         ^next <w10>)
   (<w10> ^spelling |can|
         ^next <w11>)
   (<w11> ^spelling |move|
         ^next <w12>)
   (<w12> ^spelling |one|
         ^next <w13>)
   (<w13> ^spelling |of|
         ^next <w14>)
   (<w14> ^spelling |your|
         ^next <w15>)
   (<w15> ^spelling |pieces|
         ^next <w16>)
   (<w16> ^spelling |onto|
         ^next <w17>)
   (<w17> ^spelling |a|
         ^next <w18>)
   (<w18> ^spelling |clear|
         ^next <w19>)
   (<w19> ^spelling |location|
         ^next <w20>)
   (<w20> ^spelling |.|
         ^next nil)
   (<S2984> ^if-subclause <S3119>
            ^message-type conditional
            ^then-subclause <S3496>)
   (<S3119> ^arg1 <P90530>
            ^predicate <S3193>)
   (<P90530> #^handle new-object-id20
             ^item-type piece
             ^predicates <P90531>
             ^predicates-copied true)
   (<P90531> ^category object
             ^dialog-object true
             ^handle piece
             ^multiple true
             ^visibility not-visible)
   (<S3193> ^2 <P90547>
            ^handle on1
            ^item-type predicate)
   (<P90547> #^handle new-object-id21
             ^item-type object
             ^predicates <P90548>
             ^predicates-copied true)
   (<P90548> ^category location
             ^dialog-object true
             ^handle location
             ^multiple true
             ^visibility not-visible)
   (<S3496> ^action <A1008>
            ^action-modifier <C44>
            ^agent <R10037>
            ^arg1 <R12398>
            ^arg2 <S3479>)
   (<A1008> ^handle move1
             ^item-type action)
   (<C44> ^handle can)
   (<R10037> ^arm <A10071>
             ^handle rosie
             ^item-type object
             ^predicates <P90062>)
   (<A10071> ^action wait)
   (<P90062> ^handle rosie)
   (<R12398> ^number 1)
   (<S3479> ^2 <P90588>
            ^handle on1
            ^item-type predicate)
   (<P90588> #^handle new-object-id23
             ^item-type object
             ^predicates <P90589>
             ^predicates-copied true)
   (<P90589> ^category location
             ^dialog-object true
             ^handle location
             ^property clear)
}


#   If all your pieces are on their locations then you can move a piece onto a clear location.
sp {elaborate*state*sentence*if-all-your-pieces-are-on-their-locations-then-you-can-move-a-piece-onto-a-clear-location
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 10)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3523>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If all your pieces are on their locations then you can move a piece onto a clear location.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |all|
         ^next <w2>)
   (<w2> ^spelling |your|
         ^next <w3>)
   (<w3> ^spelling |pieces|
         ^next <w4>)
   (<w4> ^spelling |are|
         ^next <w5>)
   (<w5> ^spelling |on|
         ^next <w6>)
   (<w6> ^spelling |their|
         ^next <w7>)
   (<w7> ^spelling |locations|
         ^next <w8>)
   (<w8> ^spelling |then|
         ^next <w9>)
   (<w9> ^spelling |you|
         ^next <w10>)
   (<w10> ^spelling |can|
         ^next <w11>)
   (<w11> ^spelling |move|
         ^next <w12>)
   (<w12> ^spelling |a|
         ^next <w13>)
   (<w13> ^spelling |piece|
         ^next <w14>)
   (<w14> ^spelling |onto|
         ^next <w15>)
   (<w15> ^spelling |a|
         ^next <w16>)
   (<w16> ^spelling |clear|
         ^next <w17>)
   (<w17> ^spelling |location|
         ^next <w18>)
   (<w18> ^spelling |.|
         ^next nil)
   (<S3523> ^if-subclause <S3658>
            ^message-type conditional
            ^then-subclause <S3997>)
   (<S3658> ^arg1 <P90638>
            ^predicate <S3732>)
   (<P90638> #^handle new-object-id24
             ^item-type piece
             ^predicates <P90639>
             ^predicates-copied true)
   (<P90639> ^category object
             ^dialog-object true
             ^handle piece
             ^multiple true
             ^visibility not-visible)
   (<S3732> ^2 <P90655>
            ^handle on1
            ^item-type predicate)
   (<P90655> #^handle new-object-id25
             ^item-type object
             ^predicates <P90656>
             ^predicates-copied true)
   (<P90656> ^category location
             ^dialog-object true
             ^handle location
             ^multiple true
             ^visibility not-visible)
   (<S3997> ^action <A1008>
            ^action-modifier <C44>
            ^agent <R10037>
            ^arg1 <P90673>
            ^arg2 <S3980>)
   (<A1008> ^handle move1
             ^item-type action)
   (<C44> ^handle can)
   (<R10037> ^arm <A10071>
             ^handle rosie
             ^item-type object
             ^predicates <P90062>)
   (<A10071> ^action wait)
   (<P90062> ^handle rosie)
   (<P90673> #^handle new-object-id26
             ^item-type piece
             ^predicates <P90674>
             ^predicates-copied true)
   (<P90674> ^category piece
             ^dialog-object true
             ^handle piece)
   (<S3980> ^2 <P90683>
            ^handle on1
            ^item-type predicate)
   (<P90683> #^handle new-object-id27
             ^item-type object
             ^predicates <P90684>
             ^predicates-copied true)
   (<P90684> ^category location
             ^dialog-object true
             ^handle location
             ^property clear)
}


#   The name of the goal is three-in-a-row.
sp {elaborate*state*sentence*the-name-of-the-goal-is-three-in-a-row
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 11)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S4020>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The name of the goal is three-in-a-row.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |name|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |the|
         ^next <w4>)
   (<w4> ^spelling |goal|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |three-in-a-row|
         ^next <w7>)
   (<w7> ^spelling |.|
         ^next nil)
   (<S4020> ^arg1 <S4138>
            ^message-type object-description
            ^predicate <R12912>)
   (<S4138> ^2 <S4139>
            ^handle of1
            ^item-type predicate)
   (<S4139> ^2 <G4>
            ^handle name1)
   (<G4> ^handle goal
          ^property <C25>)
   (<C25> ^handle concept
           ^type conceptual)
   (<R12912> #^handle three-in-a-row28
              ^item-type predicate
              ^word-structure <N10735>)
   (<N10735> ^referent <R12912>
              ^spelling three-in-a-row)
}


