#### Test sentences for ROSIE - 
#    Built by the SentencesToSoar tool Fri Sep 02 10:04:26 EDT 2016
#    from file 'crazy-eights.exp.txt'.
learn --off
#   Apply initialize-rosie to set up the state.
sp {apply*initialize-rosie*sentence-number
   (state <s> ^name rosie
              ^operator.name initialize-rosie)
-->
   (<s> ^current-sentence-number 1
        ^max-sentence-number 17
        ^failure-count 0
        ^success-count 0)
}


#   The name of the game is crazy-eights.
sp {elaborate*state*sentence*the-name-of-the-game-is-crazy-eights
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 1)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S124>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The name of the game is crazy-eights.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |name|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |the|
         ^next <w4>)
   (<w4> ^spelling |game|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |crazy-eights|
         ^next <w7>)
   (<w7> ^spelling |.|
         ^next nil)
   (<S124> ^arg1 <S246>
           ^message-type object-description
           ^predicate <N10072>)
   (<S246> ^2 <S247>
           ^handle of1
           ^item-type predicate)
   (<S247> ^2 <N10049>
           ^handle name1)
   (<N10049> ^handle game1
             ^property <C62>)
   (<C62> ^handle concept
           ^type conceptual)
   (<N10072> #^handle crazy-eights2
             ^item-type predicate
             ^word-structure <N10071>)
   (<N10071> ^referent <R10193>
              ^spelling crazy-eights)
   (<R10193> #^handle crazy-eights2
              ^word-structure <N10071>)
}


#   If the rank of one of your cards is equal to the rank of the top card then you can play your card.
sp {elaborate*state*sentence*if-the-rank-of-one-of-your-cards-is-equal-to-the-rank-of-the-top-card-then-you-can-play-your-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 2)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S304>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If the rank of one of your cards is equal to the rank of the top card then you can play your card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |the|
         ^next <w2>)
   (<w2> ^spelling |rank|
         ^next <w3>)
   (<w3> ^spelling |of|
         ^next <w4>)
   (<w4> ^spelling |one|
         ^next <w5>)
   (<w5> ^spelling |of|
         ^next <w6>)
   (<w6> ^spelling |your|
         ^next <w7>)
   (<w7> ^spelling |cards|
         ^next <w8>)
   (<w8> ^spelling |is|
         ^next <w9>)
   (<w9> ^spelling |equal|
         ^next <w10>)
   (<w10> ^spelling |to|
         ^next <w11>)
   (<w11> ^spelling |the|
         ^next <w12>)
   (<w12> ^spelling |rank|
         ^next <w13>)
   (<w13> ^spelling |of|
         ^next <w14>)
   (<w14> ^spelling |the|
         ^next <w15>)
   (<w15> ^spelling |top|
         ^next <w16>)
   (<w16> ^spelling |card|
         ^next <w17>)
   (<w17> ^spelling |then|
         ^next <w18>)
   (<w18> ^spelling |you|
         ^next <w19>)
   (<w19> ^spelling |can|
         ^next <w20>)
   (<w20> ^spelling |play|
         ^next <w21>)
   (<w21> ^spelling |your|
         ^next <w22>)
   (<w22> ^spelling |card|
         ^next <w23>)
   (<w23> ^spelling |.|
         ^next nil)
   (<S304> ^if-subclause <S517>
           ^message-type conditional
           ^then-subclause <S854>)
   (<S517> ^action <N10119>
           ^arg1 <N10091>
           ^arg1 <S518>
           ^predicate <S679>)
   (<N10119> ^handle is1
             ^item-type action)
   (<N10091> ^handle rank1
             ^property <C62>
             ^relation <S499>)
   (<C62> ^handle concept
           ^type conceptual)
   (<S499> ^2 <R10357>
           ^handle of1)
   (<R10357> ^number 1
             ^relation <S494>)
   (<S494> ^2 <P90215>
           ^handle of1)
   (<P90215> #^handle new-object-id3
             ^item-type card
             ^possessive true
             ^predicates <P90216>
             ^predicates-copied true)
   (<S518> ^2 <S519>
           ^handle of1
           ^item-type predicate)
   (<S519> ^2 <R10357>
           ^handle rank1)
   (<S679> ^2 <N10137>
           ^handle equal
           ^item-type predicate)
   (<N10137> ^handle rank1
             ^property <C62>
             ^relation <S677>)
   (<S677> ^2 <P90271>
           ^handle of1)
   (<P90271> #^handle new-object-id4
             ^item-type card
             ^predicates <P90272>
             ^predicates-copied true)
   (<P90272> ^category card
             ^dialog-object true
             ^handle top
             ^name top
             ^visibility not-visible)
   (<S854> ^action <N10166>
           ^action-modifier <N10164>
           ^agent <R10090>
           ^arg1 <P90294>)
   (<N10166> ^handle play
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-play1)
   (<N10164> ^handle can)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
   (<P90294> #^handle new-object-id5
             ^item-type card
             ^possessive true
             ^predicates <P90295>
             ^predicates-copied true)
   (<P90295> ^category card
             ^dialog-object true
             ^visibility not-visible)
}


#   If the suit of one of your cards is equal to the suit of the top card then you can play your card.
sp {elaborate*state*sentence*if-the-suit-of-one-of-your-cards-is-equal-to-the-suit-of-the-top-card-then-you-can-play-your-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 3)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S881>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If the suit of one of your cards is equal to the suit of the top card then you can play your card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |the|
         ^next <w2>)
   (<w2> ^spelling |suit|
         ^next <w3>)
   (<w3> ^spelling |of|
         ^next <w4>)
   (<w4> ^spelling |one|
         ^next <w5>)
   (<w5> ^spelling |of|
         ^next <w6>)
   (<w6> ^spelling |your|
         ^next <w7>)
   (<w7> ^spelling |cards|
         ^next <w8>)
   (<w8> ^spelling |is|
         ^next <w9>)
   (<w9> ^spelling |equal|
         ^next <w10>)
   (<w10> ^spelling |to|
         ^next <w11>)
   (<w11> ^spelling |the|
         ^next <w12>)
   (<w12> ^spelling |suit|
         ^next <w13>)
   (<w13> ^spelling |of|
         ^next <w14>)
   (<w14> ^spelling |the|
         ^next <w15>)
   (<w15> ^spelling |top|
         ^next <w16>)
   (<w16> ^spelling |card|
         ^next <w17>)
   (<w17> ^spelling |then|
         ^next <w18>)
   (<w18> ^spelling |you|
         ^next <w19>)
   (<w19> ^spelling |can|
         ^next <w20>)
   (<w20> ^spelling |play|
         ^next <w21>)
   (<w21> ^spelling |your|
         ^next <w22>)
   (<w22> ^spelling |card|
         ^next <w23>)
   (<w23> ^spelling |.|
         ^next nil)
   (<S881> ^if-subclause <S1094>
           ^message-type conditional
           ^then-subclause <S1427>)
   (<S1094> ^action <N10238>
            ^arg1 <N10210>
            ^arg1 <S1095>
            ^predicate <S1252>)
   (<N10238> ^handle is1
             ^item-type action)
   (<N10210> ^handle suit1
             ^property <C62>
             ^relation <S1076>)
   (<C62> ^handle concept
           ^type conceptual)
   (<S1076> ^2 <R10761>
            ^handle of1)
   (<R10761> ^number 1
             ^relation <S1071>)
   (<S1071> ^2 <P90330>
            ^handle of1)
   (<P90330> #^handle new-object-id6
             ^item-type card
             ^possessive true
             ^predicates <P90331>
             ^predicates-copied true)
   (<S1095> ^2 <S1096>
            ^handle of1
            ^item-type predicate)
   (<S1096> ^2 <R10761>
            ^handle suit1)
   (<S1252> ^2 <N10256>
            ^handle equal
            ^item-type predicate)
   (<N10256> ^handle suit1
             ^property <C62>
             ^relation <S1250>)
   (<S1250> ^2 <P90271>
            ^handle of1)
   (<P90271> #^handle new-object-id4
             ^item-type card
             ^predicates <P90272>
             ^predicates-copied true)
   (<P90272> ^category card
             ^dialog-object true
             ^handle top
             ^name top
             ^visibility not-visible)
   (<S1427> ^action <N10284>
            ^action-modifier <N10282>
            ^agent <R10090>
            ^arg1 <P90409>)
   (<N10284> ^handle play
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-play1)
   (<N10282> ^handle can)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
   (<P90409> #^handle new-object-id7
             ^item-type card
             ^possessive true
             ^predicates <P90410>
             ^predicates-copied true)
   (<P90410> ^category card
             ^dialog-object true
             ^visibility not-visible)
}


#   If one of your cards is a wild card then you can play the card.
sp {elaborate*state*sentence*if-one-of-your-cards-is-a-wild-card-then-you-can-play-the-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 4)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S1454>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If one of your cards is a wild card then you can play the card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |one|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |your|
         ^next <w4>)
   (<w4> ^spelling |cards|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |a|
         ^next <w7>)
   (<w7> ^spelling |wild|
         ^next <w8>)
   (<w8> ^spelling |card|
         ^next <w9>)
   (<w9> ^spelling |then|
         ^next <w10>)
   (<w10> ^spelling |you|
         ^next <w11>)
   (<w11> ^spelling |can|
         ^next <w12>)
   (<w12> ^spelling |play|
         ^next <w13>)
   (<w13> ^spelling |the|
         ^next <w14>)
   (<w14> ^spelling |card|
         ^next <w15>)
   (<w15> ^spelling |.|
         ^next nil)
   (<S1454> ^if-subclause <S1599>
            ^message-type conditional
            ^then-subclause <S1842>)
   (<S1599> ^action <N10346>
            ^arg1 <R11115>
            ^predicate <N10362>
            ^predicate <N10365>)
   (<N10346> ^handle is1
             ^item-type action)
   (<R11115> ^number 1
             ^relation <S1578>)
   (<S1578> ^2 <P90432>
            ^handle of1)
   (<P90432> #^handle new-object-id8
             ^item-type card
             ^possessive true
             ^predicates <P90433>
             ^predicates-copied true)
   (<P90433> ^category card
             ^dialog-object true
             ^multiple true
             ^visibility not-visible)
   (<N10362> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<N10365> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
   (<S1842> ^action <N10376>
            ^action-modifier <N10374>
            ^agent <R10090>
            ^arg1 <P90409>)
   (<N10376> ^handle play
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-play1)
   (<N10374> ^handle can)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
   (<P90409> #^handle new-object-id7
             ^item-type card
             ^possessive true
             ^predicates <P90410>
             ^predicates-copied true)
   (<P90410> ^category card
             ^dialog-object true
             ^visibility not-visible)
}


#   If a card in your hand is a wild card then you can play the card.
sp {elaborate*state*sentence*if-a-card-in-your-hand-is-a-wild-card-then-you-can-play-the-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 5)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S1869>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card in your hand is a wild card then you can play the card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |in|
         ^next <w4>)
   (<w4> ^spelling |your|
         ^next <w5>)
   (<w5> ^spelling |hand|
         ^next <w6>)
   (<w6> ^spelling |is|
         ^next <w7>)
   (<w7> ^spelling |a|
         ^next <w8>)
   (<w8> ^spelling |wild|
         ^next <w9>)
   (<w9> ^spelling |card|
         ^next <w10>)
   (<w10> ^spelling |then|
         ^next <w11>)
   (<w11> ^spelling |you|
         ^next <w12>)
   (<w12> ^spelling |can|
         ^next <w13>)
   (<w13> ^spelling |play|
         ^next <w14>)
   (<w14> ^spelling |the|
         ^next <w15>)
   (<w15> ^spelling |card|
         ^next <w16>)
   (<w16> ^spelling |.|
         ^next nil)
   (<S1869> ^if-subclause <S2043>
            ^message-type conditional
            ^then-subclause <S2286>)
   (<S2043> ^action <N10442>
            ^arg1 <P90519>
            ^predicate <N10461>
            ^predicate <N10458>)
   (<N10442> ^handle is1
             ^item-type action)
   (<P90519> #^handle new-object-id10
             ^item-type card
             ^predicates <P90520>
             ^predicates-copied true
             ^relation <S2022>)
   (<P90520> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<S2022> ^2 <P90514>
            ^handle in1)
   (<P90514> #^handle new-object-id9
             ^item-type object
             ^possessive true
             ^predicates <P90515>
             ^predicates-copied true)
   (<P90515> ^category object
             ^dialog-object true
             ^shape hand1
             ^visibility not-visible)
   (<N10461> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
   (<N10458> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<S2286> ^action <N10472>
            ^action-modifier <N10470>
            ^agent <R10090>
            ^arg1 <P90519>)
   (<N10472> ^handle play
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-play1)
   (<N10470> ^handle can)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
}


#   The goal is that your hand is empty.
sp {elaborate*state*sentence*the-goal-is-that-your-hand-is-empty
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 6)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2313>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The goal is that your hand is empty.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |goal|
         ^next <w2>)
   (<w2> ^spelling |is|
         ^next <w3>)
   (<w3> ^spelling |that|
         ^next <w4>)
   (<w4> ^spelling |your|
         ^next <w5>)
   (<w5> ^spelling |hand|
         ^next <w6>)
   (<w6> ^spelling |is|
         ^next <w7>)
   (<w7> ^spelling |empty|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S2313> ^arg1 <N10509>
            ^message-type object-description
            ^subclause <S2389>)
   (<N10509> ^handle goal
             ^property <C62>)
   (<C62> ^handle concept
           ^type conceptual)
   (<S2389> ^action <N10543>
            ^arg1 <P90593>
            ^predicate <N10554>)
   (<N10543> ^handle is1
             ^item-type action)
   (<P90593> #^handle new-object-id11
             ^item-type object
             ^possessive true
             ^predicates <P90594>
             ^predicates-copied true)
   (<P90594> ^category object
             ^dialog-object true
             ^shape hand1
             ^visibility not-visible)
   (<N10554> ^handle empty
             ^item-type predicate
             ^property <C38>)
   (<C38> ^handle property
           ^type visual)
}


#   If your hand is empty then you win.
sp {elaborate*state*sentence*if-your-hand-is-empty-then-you-win
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 7)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2546>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If your hand is empty then you win.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |your|
         ^next <w2>)
   (<w2> ^spelling |hand|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |empty|
         ^next <w5>)
   (<w5> ^spelling |then|
         ^next <w6>)
   (<w6> ^spelling |you|
         ^next <w7>)
   (<w7> ^spelling |win|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S2546> ^if-subclause <S2663>
            ^message-type conditional
            ^then-subclause <S2768>)
   (<S2663> ^action <N10582>
            ^arg1 <P90614>
            ^predicate <N10593>)
   (<N10582> ^handle is1
             ^item-type action)
   (<P90614> #^handle new-object-id12
             ^item-type object
             ^possessive true
             ^predicates <P90615>
             ^predicates-copied true)
   (<P90615> ^category object
             ^dialog-object true
             ^shape hand1
             ^visibility not-visible)
   (<N10593> ^handle empty
             ^item-type predicate
             ^property <C38>)
   (<C38> ^handle property
           ^type visual)
   (<S2768> ^action <N10601>
            ^agent <R10090>)
   (<N10601> ^handle win
             ^item-type action
             ^procedural <E12>
             ^type action)
   (<E12> ^op_name initiate-win1)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
}


#   If you have no cards then you win.
sp {elaborate*state*sentence*if-you-have-no-cards-then-you-win
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 8)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2812>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If you have no cards then you win.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |you|
         ^next <w2>)
   (<w2> ^spelling |have|
         ^next <w3>)
   (<w3> ^spelling |no|
         ^next <w4>)
   (<w4> ^spelling |cards|
         ^next <w5>)
   (<w5> ^spelling |then|
         ^next <w6>)
   (<w6> ^spelling |you|
         ^next <w7>)
   (<w7> ^spelling |win|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S2812> ^if-subclause <S2875>
            ^message-type conditional
            ^then-subclause <S3005>)
   (<S2875> ^action <N10628>
            ^agent <R10090>
            ^arg1 <P90649>)
   (<N10628> ^handle has
             ^item-type action
             ^procedural <E10>
             ^type action)
   (<E10> ^op_name initiate-has1)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
   (<P90649> #^handle new-object-id13
             ^item-type card
             ^predicates <P90650>
             ^predicates-copied true)
   (<P90650> ^category card
             ^dialog-object true
             ^multiple true
             ^number 0
             ^visibility unknown-visible)
   (<S3005> ^action <N10651>
            ^agent <R10090>)
   (<N10651> ^handle win
             ^item-type action
             ^procedural <E12>
             ^type action)
   (<E12> ^op_name initiate-win1)
}


#   The goal is that you have zero cards.
sp {elaborate*state*sentence*the-goal-is-that-you-have-zero-cards
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 9)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3049>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The goal is that you have zero cards.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |goal|
         ^next <w2>)
   (<w2> ^spelling |is|
         ^next <w3>)
   (<w3> ^spelling |that|
         ^next <w4>)
   (<w4> ^spelling |you|
         ^next <w5>)
   (<w5> ^spelling |have|
         ^next <w6>)
   (<w6> ^spelling |zero|
         ^next <w7>)
   (<w7> ^spelling |cards|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S3049> ^arg1 <N10676>
            ^message-type object-description
            ^subclause <S3125>)
   (<N10676> ^handle goal
             ^property <C62>)
   (<C62> ^handle concept
           ^type conceptual)
   (<S3125> ^action <N10700>
            ^agent <R10090>
            ^arg1 <P90681>)
   (<N10700> ^handle has
             ^item-type action
             ^procedural <E10>
             ^type action)
   (<E10> ^op_name initiate-has1)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
   (<P90681> #^handle new-object-id14
             ^item-type card
             ^predicates <P90682>
             ^predicates-copied true)
   (<P90682> ^category card
             ^dialog-object true
             ^multiple true
             ^number 0
             ^visibility unknown-visible)
}


#   If an opponent has zero cards then you lose.
sp {elaborate*state*sentence*if-an-opponent-has-zero-cards-then-you-lose
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 10)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3282>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If an opponent has zero cards then you lose.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |an|
         ^next <w2>)
   (<w2> ^spelling |opponent|
         ^next <w3>)
   (<w3> ^spelling |has|
         ^next <w4>)
   (<w4> ^spelling |zero|
         ^next <w5>)
   (<w5> ^spelling |cards|
         ^next <w6>)
   (<w6> ^spelling |then|
         ^next <w7>)
   (<w7> ^spelling |you|
         ^next <w8>)
   (<w8> ^spelling |lose|
         ^next <w9>)
   (<w9> ^spelling |.|
         ^next nil)
   (<S3282> ^if-subclause <S3374>
            ^message-type conditional
            ^then-subclause <S3504>)
   (<S3374> ^action <N10741>
            ^agent <P90704>
            ^arg1 <P90714>)
   (<N10741> ^handle has
             ^item-type action
             ^procedural <E10>
             ^type action)
   (<E10> ^op_name initiate-has1)
   (<P90704> #^handle new-object-id15
             ^item-type object
             ^predicates <P90705>
             ^predicates-copied true)
   (<P90705> ^category object
             ^dialog-object true
             ^shape opponent1
             ^visibility unknown-visible)
   (<P90714> #^handle new-object-id16
             ^item-type card
             ^predicates <P90715>
             ^predicates-copied true)
   (<P90715> ^category card
             ^dialog-object true
             ^multiple true
             ^number 0
             ^visibility unknown-visible)
   (<S3504> ^action <N10766>
            ^agent <R10090>)
   (<N10766> ^handle lose
             ^item-type action
             ^procedural <E13>
             ^type action)
   (<E13> ^op_name initiate-lose1)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
}


#   If an opponent has an empty hand then you lose.
sp {elaborate*state*sentence*if-an-opponent-has-an-empty-hand-then-you-lose
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 11)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3548>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If an opponent has an empty hand then you lose.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |an|
         ^next <w2>)
   (<w2> ^spelling |opponent|
         ^next <w3>)
   (<w3> ^spelling |has|
         ^next <w4>)
   (<w4> ^spelling |an|
         ^next <w5>)
   (<w5> ^spelling |empty|
         ^next <w6>)
   (<w6> ^spelling |hand|
         ^next <w7>)
   (<w7> ^spelling |then|
         ^next <w8>)
   (<w8> ^spelling |you|
         ^next <w9>)
   (<w9> ^spelling |lose|
         ^next <w10>)
   (<w10> ^spelling |.|
         ^next nil)
   (<S3548> ^if-subclause <S3640>
            ^message-type conditional
            ^then-subclause <S3787>)
   (<S3640> ^action <N10799>
            ^agent <P90741>
            ^arg1 <P90754>)
   (<N10799> ^handle has
             ^item-type action
             ^procedural <E10>
             ^type action)
   (<E10> ^op_name initiate-has1)
   (<P90741> #^handle new-object-id17
             ^item-type object
             ^predicates <P90742>
             ^predicates-copied true)
   (<P90742> ^category object
             ^dialog-object true
             ^shape opponent1
             ^visibility unknown-visible)
   (<P90754> #^handle new-object-id18
             ^item-type object
             ^predicates <P90755>
             ^predicates-copied true)
   (<P90755> ^category object
             ^dialog-object true
             ^property empty
             ^shape hand1
             ^visibility unknown-visible)
   (<S3787> ^action <N10828>
            ^agent <R10090>)
   (<N10828> ^handle lose
             ^item-type action
             ^procedural <E13>
             ^type action)
   (<E13> ^op_name initiate-lose1)
   (<R10090> ^arm <A10140>
             ^handle rosie
             ^item-type object
             ^predicates <P90148>)
   (<A10140> ^action wait
             ^state internal)
   (<P90148> ^handle rosie)
}


#   If a card has a value of eight then it is wild.
sp {elaborate*state*sentence*if-a-card-has-a-value-of-eight-then-it-is-wild
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 12)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3831>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card has a value of eight then it is wild.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |has|
         ^next <w4>)
   (<w4> ^spelling |a|
         ^next <w5>)
   (<w5> ^spelling |value|
         ^next <w6>)
   (<w6> ^spelling |of|
         ^next <w7>)
   (<w7> ^spelling |eight|
         ^next <w8>)
   (<w8> ^spelling |then|
         ^next <w9>)
   (<w9> ^spelling |it|
         ^next <w10>)
   (<w10> ^spelling |is|
         ^next <w11>)
   (<w11> ^spelling |wild|
         ^next <w12>)
   (<w12> ^spelling |.|
         ^next nil)
   (<S3831> ^if-subclause <S3926>
            ^message-type conditional
            ^then-subclause <S4094>)
   (<S3926> ^action <N10862>
            ^agent <P90779>
            ^arg1 <N10877>
            ^arg1 <S4022>)
   (<N10862> ^handle has
             ^item-type action
             ^procedural <E10>
             ^type action)
   (<E10> ^op_name initiate-has1)
   (<P90779> #^handle new-object-id19
             ^item-type card
             ^predicates <P90780>
             ^predicates-copied true)
   (<P90780> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<N10877> ^handle value
             ^property <C62>
             ^relation <S4020>)
   (<C62> ^handle concept
           ^type conceptual)
   (<S4020> ^2 <R12830>
            ^handle of1)
   (<R12830> ^number 8)
   (<S4022> ^2 <S4023>
            ^handle of1
            ^item-type predicate)
   (<S4023> ^2 <R12830>
            ^handle value)
   (<S4094> ^action <N10894>
            ^arg1 <P90779>
            ^predicate <N10905>)
   (<N10894> ^handle is1
             ^item-type action)
   (<N10905> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
}


#   If the value of a card is eight then the card is a wild card.
sp {elaborate*state*sentence*if-the-value-of-a-card-is-eight-then-the-card-is-a-wild-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 13)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S4155>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If the value of a card is eight then the card is a wild card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |the|
         ^next <w2>)
   (<w2> ^spelling |value|
         ^next <w3>)
   (<w3> ^spelling |of|
         ^next <w4>)
   (<w4> ^spelling |a|
         ^next <w5>)
   (<w5> ^spelling |card|
         ^next <w6>)
   (<w6> ^spelling |is|
         ^next <w7>)
   (<w7> ^spelling |eight|
         ^next <w8>)
   (<w8> ^spelling |then|
         ^next <w9>)
   (<w9> ^spelling |the|
         ^next <w10>)
   (<w10> ^spelling |card|
         ^next <w11>)
   (<w11> ^spelling |is|
         ^next <w12>)
   (<w12> ^spelling |a|
         ^next <w13>)
   (<w13> ^spelling |wild|
         ^next <w14>)
   (<w14> ^spelling |card|
         ^next <w15>)
   (<w15> ^spelling |.|
         ^next nil)
   (<S4155> ^if-subclause <S4323>
            ^message-type conditional
            ^then-subclause <S4463>)
   (<S4323> ^action <N10943>
            ^arg1 <S4324>
            ^predicate <P11208>)
   (<N10943> ^handle is1
             ^item-type action)
   (<S4324> ^2 <S4325>
            ^handle of1
            ^item-type predicate)
   (<S4325> ^2 <P90827>
            ^handle value)
   (<P11208> ^handle 8
              ^item-type predicate
              ^property <P11000>)
   (<P11000> ^handle number
              ^item-type property
              ^type number)
   (<S4463> ^action <N10971>
            ^arg1 <P90827>
            ^predicate <N10987>
            ^predicate <N10990>)
   (<N10971> ^handle is1
             ^item-type action)
   (<P90827> #^handle new-object-id20
             ^item-type card
             ^predicates <P90828>
             ^predicates-copied true)
   (<P90828> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<N10987> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<N10990> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
}


#   If a card is on the deck and it is not below another card then it is the top card.
sp {elaborate*state*sentence*if-a-card-is-on-the-deck-and-it-is-not-below-another-card-then-it-is-the-top-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 14)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S4558>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card is on the deck and it is not below another card then it is the top card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |on|
         ^next <w5>)
   (<w5> ^spelling |the|
         ^next <w6>)
   (<w6> ^spelling |deck|
         ^next <w7>)
   (<w7> ^spelling |and|
         ^next <w8>)
   (<w8> ^spelling |it|
         ^next <w9>)
   (<w9> ^spelling |is|
         ^next <w10>)
   (<w10> ^spelling |not|
         ^next <w11>)
   (<w11> ^spelling |below|
         ^next <w12>)
   (<w12> ^spelling |another|
         ^next <w13>)
   (<w13> ^spelling |card|
         ^next <w14>)
   (<w14> ^spelling |then|
         ^next <w15>)
   (<w15> ^spelling |it|
         ^next <w16>)
   (<w16> ^spelling |is|
         ^next <w17>)
   (<w17> ^spelling |the|
         ^next <w18>)
   (<w18> ^spelling |top|
         ^next <w19>)
   (<w19> ^spelling |card|
         ^next <w20>)
   (<w20> ^spelling |.|
         ^next nil)
   (<S4558> ^if-subclause <S4766>
            ^message-type conditional
            ^then-subclause <S4991>)
   (<S4766> ^subclause <S4829>
            ^subclause <S4675>)
   (<S4829> ^action <N11052>
            ^arg1 <P90904>
            ^modifier <N11064>
            ^predicate <S4920>)
   (<N11052> ^handle is1
             ^item-type action)
   (<N11064> ^handle negation
             ^modifier true)
   (<S4920> ^2 <P90985>
            ^handle below1
            ^item-type predicate)
   (<P90985> #^handle new-object-id23
             ^item-type card
             ^predicates <P90986>
             ^predicates-copied true
             ^specifier distinct)
   (<P90986> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<S4675> ^action <N11018>
            ^arg1 <P90904>
            ^predicate <S4753>)
   (<N11018> ^handle is1
             ^item-type action)
   (<S4753> ^2 <P90954>
            ^handle on1
            ^item-type predicate)
   (<P90954> #^handle new-object-id22
             ^item-type object
             ^predicates <P90955>
             ^predicates-copied true)
   (<P90955> ^category object
             ^dialog-object true
             ^shape deck
             ^visibility not-visible)
   (<S4991> ^action <N11088>
            ^arg1 <P90904>
            ^predicate <N11104>
            ^predicate <N11107>)
   (<N11088> ^handle is1
             ^item-type action)
   (<P90904> #^handle new-object-id21
             ^item-type card
             ^predicates <P90905>
             ^predicates-copied true)
   (<P90905> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<N11104> ^handle top
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<N11107> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
}


#   If a card is on the deck and the card is not below another card then the card is the top card.
sp {elaborate*state*sentence*if-a-card-is-on-the-deck-and-the-card-is-not-below-another-card-then-the-card-is-the-top-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 15)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S5086>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card is on the deck and the card is not below another card then the card is the top card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |on|
         ^next <w5>)
   (<w5> ^spelling |the|
         ^next <w6>)
   (<w6> ^spelling |deck|
         ^next <w7>)
   (<w7> ^spelling |and|
         ^next <w8>)
   (<w8> ^spelling |the|
         ^next <w9>)
   (<w9> ^spelling |card|
         ^next <w10>)
   (<w10> ^spelling |is|
         ^next <w11>)
   (<w11> ^spelling |not|
         ^next <w12>)
   (<w12> ^spelling |below|
         ^next <w13>)
   (<w13> ^spelling |another|
         ^next <w14>)
   (<w14> ^spelling |card|
         ^next <w15>)
   (<w15> ^spelling |then|
         ^next <w16>)
   (<w16> ^spelling |the|
         ^next <w17>)
   (<w17> ^spelling |card|
         ^next <w18>)
   (<w18> ^spelling |is|
         ^next <w19>)
   (<w19> ^spelling |the|
         ^next <w20>)
   (<w20> ^spelling |top|
         ^next <w21>)
   (<w21> ^spelling |card|
         ^next <w22>)
   (<w22> ^spelling |.|
         ^next nil)
   (<S5086> ^if-subclause <S5290>
            ^message-type conditional
            ^then-subclause <S5581>)
   (<S5290> ^subclause <S5386>
            ^subclause <S5203>)
   (<S5386> ^action <N11176>
            ^arg1 <P91024>
            ^modifier <N11187>
            ^predicate <S5477>)
   (<N11176> ^handle is1
             ^item-type action)
   (<N11187> ^handle negation
             ^modifier true)
   (<S5477> ^2 <P91142>
            ^handle below1
            ^item-type predicate)
   (<P91142> #^handle new-object-id25
             ^item-type card
             ^predicates <P91143>
             ^predicates-copied true
             ^specifier distinct)
   (<P91143> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<S5203> ^action <N11135>
            ^arg1 <P91024>
            ^predicate <S5277>)
   (<N11135> ^handle is1
             ^item-type action)
   (<S5277> ^2 <P90954>
            ^handle on1
            ^item-type predicate)
   (<P90954> #^handle new-object-id22
             ^item-type object
             ^predicates <P90955>
             ^predicates-copied true)
   (<P90955> ^category object
             ^dialog-object true
             ^shape deck
             ^visibility not-visible)
   (<S5581> ^action <N11218>
            ^arg1 <P91024>
            ^predicate <N11237>
            ^predicate <N11234>)
   (<N11218> ^handle is1
             ^item-type action)
   (<P91024> #^handle new-object-id24
             ^item-type card
             ^predicates <P91025>
             ^predicates-copied true)
   (<P91025> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<N11237> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
   (<N11234> ^handle top
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
}


#   If a card is in your hand then it is your card.
sp {elaborate*state*sentence*if-a-card-is-in-your-hand-then-it-is-your-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 16)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S5676>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card is in your hand then it is your card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |in|
         ^next <w5>)
   (<w5> ^spelling |your|
         ^next <w6>)
   (<w6> ^spelling |hand|
         ^next <w7>)
   (<w7> ^spelling |then|
         ^next <w8>)
   (<w8> ^spelling |it|
         ^next <w9>)
   (<w9> ^spelling |is|
         ^next <w10>)
   (<w10> ^spelling |your|
         ^next <w11>)
   (<w11> ^spelling |card|
         ^next <w12>)
   (<w12> ^spelling |.|
         ^next nil)
   (<S5676> ^if-subclause <S5791>
            ^message-type conditional
            ^then-subclause <S5942>)
   (<S5791> ^action <N11264>
            ^arg1 <P91216>
            ^predicate <S5871>
            ^predicate <S5870>)
   (<N11264> ^handle is1
             ^item-type action)
   (<P91216> #^handle new-object-id26
             ^item-type card
             ^predicates <P91217>
             ^predicates-copied true)
   (<P91217> ^category card
             ^dialog-object true
             ^visibility unknown-visible)
   (<S5871> ^2 <N11277>
            ^handle hand1
            ^item-type predicate)
   (<N11277> ^handle owned-by-you1)
   (<S5870> ^2 <P91236>
            ^handle in1
            ^item-type predicate)
   (<P91236> #^handle new-object-id27
             ^item-type object
             ^possessive true
             ^predicates <P91237>
             ^predicates-copied true)
   (<P91237> ^category object
             ^dialog-object true
             ^shape hand1
             ^visibility not-visible)
   (<S5942> ^action <N11295>
            ^arg1 <P91216>
            ^predicate <N11307>)
   (<N11295> ^handle is1
             ^item-type action)
   (<N11307> ^handle owned-by-you1
             ^item-type predicate)
}


#   If two cards have the same value then they have the same rank.
sp {elaborate*state*sentence*if-two-cards-have-the-same-value-then-they-have-the-same-rank
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 17)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S6020>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If two cards have the same value then they have the same rank.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |two|
         ^next <w2>)
   (<w2> ^spelling |cards|
         ^next <w3>)
   (<w3> ^spelling |have|
         ^next <w4>)
   (<w4> ^spelling |the|
         ^next <w5>)
   (<w5> ^spelling |same|
         ^next <w6>)
   (<w6> ^spelling |value|
         ^next <w7>)
   (<w7> ^spelling |then|
         ^next <w8>)
   (<w8> ^spelling |they|
         ^next <w9>)
   (<w9> ^spelling |have|
         ^next <w10>)
   (<w10> ^spelling |the|
         ^next <w11>)
   (<w11> ^spelling |same|
         ^next <w12>)
   (<w12> ^spelling |rank|
         ^next <w13>)
   (<w13> ^spelling |.|
         ^next nil)
   (<S6020> ^if-subclause <S6112>
            ^message-type conditional
            ^then-subclause <S6335>)
   (<S6112> ^action <N11338>
            ^agent <P91268>
            ^arg1 <N11353>
            ^arg1 <N11356>)
   (<N11338> ^handle has
             ^item-type action
             ^procedural <E10>
             ^type action)
   (<E10> ^op_name initiate-has1)
   (<P91268> #^handle new-object-id28
             ^item-type card
             ^predicates <P91269>
             ^predicates-copied true)
   (<P91269> ^category card
             ^dialog-object true
             ^multiple true
             ^number 2
             ^visibility unknown-visible)
   (<N11353> ^handle same
             ^property <C38>)
   (<C38> ^handle property
           ^type visual)
   (<N11356> ^handle value
             ^property <C62>)
   (<C62> ^handle concept
           ^type conceptual)
   (<S6335> ^action <N11364>
            ^agent <P91268>
            ^arg1 <N11380>
            ^arg1 <N11377>)
   (<N11364> ^handle has
             ^item-type action
             ^procedural <E10>
             ^type action)
   (<N11380> ^handle rank1
             ^property <C62>)
   (<N11377> ^handle same
             ^property <C38>)
}


